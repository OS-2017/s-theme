{"version":3,"sources":["regions/_reg_content.scss","config/variables/_var_grids.scss","config/variables/_var_colors.scss","../../../../../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","../../../../../node_modules/singularitygs/stylesheets/singularitygs/_api.scss","../../../../../node_modules/singularitygs/stylesheets/singularitygs/math/_columns.scss","../../../../../node_modules/singularitygs/stylesheets/singularitygs/helpers/_directions.scss","../../../../../node_modules/singularitygs/stylesheets/singularitygs/api/_isolation.scss"],"names":[],"mappings":"AAAA,yBAAyB,sBAAyB,CAAG,AAKrD,aACE,iBACA,ACD4B,qBCHf,CFKd,AACD,iCACE,iBCHkC,CDInC,AGqDG,yBH/CF,+DIgFE,WAAA,ACzEyB,YDyEzB,AE5Fa,cF4Fb,AG5DgD,eH4DhD,AGtDkD,WHsDlD,AGpB0C,eAcuB,CP1EnE,AAKG,+CAGF,UAAW,CACX,AAKD,oEIkEE,UAAA,ACzEyB,WDkCuD,AAuChF,mBAAA,AGjDoD,WHiDpD,AGpB0C,kBNxEhC,CD0BZ,AAGG,oEI+DD,UAAA,ACzEyB,YDyEzB,AE5Fa,cF4Fb,AG5DgD,eH4DhD,AGtDkD,WHsDlD,AGpB0C,eAcuB,CP5DnE,AAcA,qFIoDE,WAAA,ACzEyB,YDyEzB,AE5Fa,cF4Fb,AG5DgD,eH4DhD,AGtDkD,WHsDlD,AGpB0C,eAcuB,CP5DnE,AASG,4FAGF,UAAW,CACX,AAMD,oEI+CE,gBAAA,ACzEyB,WDkCuD,AAuChF,mBAAA,AGjDoD,WHiDpD,AGpB0C,kBNxEhC,CD6CZ,AAWA,qFIoCE,WAAA,ACzEyB,YDyEzB,AE5Fa,cF4Fb,AG5DgD,eH4DhD,AGtDkD,WHsDlD,AGpB0C,eAcuB,CPzCnE,AAMG,4FAGF,UAAW,CATZ,AAUC,qEIqCC,gBAAA,ACzEyB,YDyEzB,AE5Fa,cF4Fb,AG5DgD,eH4DhD,AGtDkD,WHsDlD,AGpB0C,eAcuB,CP3BhE,AAKH,iEI4BE,UAAA,ACzEyB,YDyEzB,AE5Fa,cF4Fb,AG5DgD,eH4DhD,AGtDkD,WHsDlD,AGpB0C,eAcuB,CPtBnE,AAWA,kFIiBE,WAAA,ACzEyB,YDyEzB,AE5Fa,cF4Fb,AG5DgD,eH4DhD,AGtDkD,WHsDlD,AGpB0C,eAcuB,CPtBnE,AAMG,yFAGH,UAAW,CATX,AAUC,iEIkBC,UAAA,ACzEyB,WDkCuD,AAuChF,mBAAA,AGjDoD,WHiDpD,AGpB0C,kBNxEhC,CDgEZ,AAcG,kEIcD,UAAA,ACzEyB,YDyEzB,AE5Fa,cF4Fb,AG5DgD,eH4DhD,AGtDkD,WHsDlD,AGpB0C,gBPSxC,AOK+D,UPLnD,CACb,CAAA,AGvBD,yBH8BF,iEIGE,UAAA,ACzEyB,WDkCuD,AAuChF,mBAAA,AGjDoD,gBHiDpD,ACzEyB,WDyEzB,AGpB0C,kBNxEhC,CDyFZ,AAWA,kFIRE,WAAA,ACzEyB,YDyEzB,AE5Fa,cF4Fb,AG5DgD,eH4DhD,AGtDkD,WHsDlD,AGpB0C,eAcuB,CPGnE,AAMI,yFAGH,UAAW,CATZ,AAUC,iEIPC,UAAA,ACzEyB,WDkCuD,AAuChF,mBAAA,AGjDoD,WHiDpD,AGpB0C,kBNxEhC,CDyFZ,AAcG,kEIXD,UAAA,ACzEyB,YDyEzB,AE5Fa,cF4Fb,AG5DgD,eH4DhD,AGtDkD,WHsDlD,AGpB0C,eAcuB,CPqBhE,CAAA","file":"regions.css","sourcesContent":["#omega-screen--indicator{display: none !important;}\n\n\n// Main content container\n//--------------------------------------------------------------\n#main-layout{\n  padding: $gutters-main-layout;\n  background-color: $white;\n}\nbody.path-frontpage #main-layout{\n  padding: $gutters-main-layout-home;\n}\n// Content Columns\n//==========================================================================\n\n@include breakpoint ($break-mobile-landscape){\n  //Main layout container with .region--content and .region--content-bottom\n  .content-inner-regions {\n\t\t@include grid-span(12, 1);\n\n\t\t.region--content{\n    \t\t@include grid-span(12, 1);\n \t\t }\n\n\t\t.region--content-bottom {\n\t\t\tclear:both;\n\t\t}\n\t}\n\n  //Only sidebar first\n  //-------------------------------\n  .with--sidebar-first.without--sidebar-second{\n    .region--sidebar-first{\n      @include grid-span(3, 1);\n    }\n\t.content-inner-regions { //main content container\n\t\t@include grid-span(9, 4);\n\n\t\t.region--content {\n    \t\t@include grid-span(12, 1);\n \t\t }\n\n \t\t .region--content-bottom {\n\t\t\tclear:both;\n\t\t}\n\t}\n  }\n\n  //Only sidebar second\n  //-------------------------------\n  .with--sidebar-second.without--sidebar-first{\n\t.content-inner-regions {\n\t\t@include grid-span(8, 1);\n\n\t\t.region--content{\n    \t\t@include grid-span(12, 1);\n \t\t }\n\n\t\t.region--content-bottom {\n\t\t\tclear:both;\n\t\t}\n\t}\n    .region--sidebar-second{\n      @include grid-span(4, 9);\n    }\n  }\n\n  //both sidebars (second sidebar is pushed under at small sizes)\n  //-------------------------------\n  .with--sidebar-first.with--sidebar-second{\n\t.content-inner-regions {\n\t\t@include grid-span(9, 4);\n\n\t\t.region--content{\n    \t\t@include grid-span(12, 1);\n \t\t }\n\n\t\t.region--content-bottom {\n\t\tclear:both;\n\t\t}\n\t}\n    .region--sidebar-first {\n      @include grid-span(3, 1);\n    }\n    .region--sidebar-second {\n      @include grid-span(9, 4);\n      clear: both;\n    }\n  }\n}\n\n//Go to 3 cols with both sidebars\n//-------------------------------\n@include breakpoint ($break-tablet-landscape){\n  .with--sidebar-first.with--sidebar-second{\n\t.content-inner-regions {\n\t  @include grid-span(6, 4);\n\n\t\t  .region--content{\n\t    \t\t@include grid-span(12, 1);\n\t \t\t }\n\n\t\t.region--content-bottom {\n\t\t\tclear:both;\n\t\t}\n\t}\n    .region--sidebar-first{\n      @include grid-span(3, 1);\n    }\n    .region--sidebar-second{\n      //@include grid-span(4, 9);\n      @include grid-span(3, 10);\n    }\n  }\n}\n","// Grids\n//=====================================================================\n\n//Creating our Singularity grid\n$max-col: 12;\n$gutters: 14px;\n$gutters-main-layout: 5px 14px;\n$gutters-main-layout-home: 14px 30px;\n@include add-grid($max-col);\n@include add-gutter($gutters);\n\n//Max widths\n$max-width-mobile-landscape: 624px;\n$max-width-tablet-portrait: 768px;\n$max-width-tablet-landscape: 864px;\n$max-width-fullsize: 1000px;\n\n//Breakpoints\n$break-mobile-only: 1px $max-width-mobile-landscape - 1;\n$break-mobile-landscape: $max-width-mobile-landscape;\n$break-tablet-portrait: $max-width-tablet-portrait;\n$break-tablet-landscape: $max-width-tablet-landscape;\n$break-fullsize: $max-width-fullsize;\n","// Colors\r\n//New 2019 theme colors\r\n//===============================\r\n$white: #FFFFFF;\r\n$black: #000000;\r\n\r\n//grays\r\n$dark-gray: #4A4A4A;\r\n$dark-gray2: #5f636a;\r\n$medium-gray: #dee4e7;\r\n$light-gray: #CDCDCD;\r\n$lighter-gray: #EEEEEE;\r\n\r\n//new SAMHSA colors\r\n$blue: #1F419A;\r\n$blue-gray: #1E384B;\r\n$teal: #1A6986;\r\n$red: #CD3835;\r\n$red-dark: #A82D2B;  \r\n\r\n// General colors (non-specific variable term)\r\n//-----------------------------------------------------\r\n\r\n// Font Colors\r\n$base-font-color: $dark-gray;\r\n$action-color: $blue;\r\n$action-color-hover: $red-dark;\r\n$light-font-color: $white;\r\n\r\n//Message Colors\r\n$message-color: $light-gray;\r\n$error-color: #C00;\r\n$warning-color: #FC0;\r\n$status-color: #3C0;\r\n\r\n// Background Colors\r\n$base-background-color: $white;\r\n$second-background-color: $white;\r\n$base-accent-color: $blue-gray;\r\n$highlight-color: #f6ecab;\r\n$megamenu-highlight-color: $blue-gray;\r\n$megamenu-gray: $lighter-gray;\r\n\r\n//Main menu color\r\n$mm-bg-1: $blue-gray;\r\n$mm-bg-2: $blue-gray;\r\n$mm-color: $white;\r\n$mm-icon-color: $white;\r\n\r\n//Side menu color\r\n$sm-bg-1: $red;\r\n$sm-bg-2: $light-gray;\r\n$sm-bg-3: $lighter-gray;\r\n$sm-bg-4: #DADADA;\r\n$sm-color-1: $white;\r\n$sm-color-2: $black;\r\n$sm-border: 1px solid $white;\r\n\r\n//Social Media colors\r\n$fb-color: #3A67B8;\r\n$tw-color: #00A2F9;\r\n$yt-color: #FF0000;\r\n$blog-color: #1C7491;\r\n\r\n// This is superfish SAMHSA Main Menu\r\n$superfish-1-color: #fff;\r\n$superfish-1-color-txt: #1E384B;\r\n$superfish-1-background-color-level-first: #1E384B;\r\n$superfish-1-background-color-level-second: #eeeeee;\r\n$superfish-1-background-color-level-third: #d0d0d0;\r\n$superfish-1-background-color-level-fourth: #c0c0c0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","@import \"api/float\";\n@import \"api/isolation\";\n@import \"api/calc\";\n\n//////////////////////////////\n// Master Grid Span mixin\n//////////////////////////////\n@mixin grid-span($span, $location: 1, $grid: null, $gutter: null, $output-style: null, $gutter-style: null, $options: null) {\n\n  @if $output-style == null {\n    $output-style: sgs-get('output');\n  }\n\n  $Grid: find-grid($grid);\n  $Gutter: find-gutter($gutter);\n  $Style: find-gutter-style($gutter-style);\n\n  $Start-Row: start-row($location);\n  $End-Row: end-row($span, $location, $Grid);\n\n  $Fixed-Gutter: fixed-gutter($Grid, $Gutter, $Style);\n  $Split-Gutter: index($Style, 'split');\n  $Gutter-Property: gutter-property($Grid, $Gutter, $Style);\n\n  $Direction: sgs-get('direction');\n  $From: if($options and type-of($options) == 'map', if(map-get($options, 'from'), map-get($options, 'from'), $Direction), $Direction);\n  $From: if($From == 'ltr' or $From == 'rtl', named-direction($From), $From);\n\n  $Holder: ();\n  @each $k, $v in $options {\n    $Holder: if($k == 'from', $Holder, map-merge($Holder, ($k: $v)));\n  }\n  $options: if(length($Holder) > 0, $Holder, null);\n\n  $Span-Map: (\n    'span': $span,\n    'location': $location,\n    'grid': $Grid,\n    'gutter': $Gutter,\n    'style': $Style,\n    'start row': $Start-Row,\n    'end row': $End-Row,\n    'fixed gutter': $Fixed-Gutter,\n    'split gutter': $Split-Gutter,\n    'gutter property': $Gutter-Property,\n    'options': $options\n  );\n\n  @if sgs-get('debug') != false {\n    -sgs-span-settings: inspect($Span-Map);\n  }\n\n\n  @if function-exists('output-#{$output-style}') {\n    $Left: ();\n    $Right: ();\n\n    @if $Direction == 'both' or $From == 'left' or ($Direction == 'rtl' and $From == 'opposite') {\n      $Left: call('output-#{$output-style}', map-merge($Span-Map, ('direction': left)));\n    }\n\n    @if $Direction == 'both' or $From == 'right' or ($Direction == 'ltr' and $From == 'opposite') {\n      $Right: call('output-#{$output-style}', map-merge($Span-Map, ('direction': right)));\n    }\n\n    $Left-Keys: map-keys($Left);\n    $Right-Keys: map-keys($Right);\n    $Exclude: ();\n\n    @each $key in $Left-Keys {\n      @if index($Right-Keys, $key) {\n        @if map-get($Right, $key) == map-get($Left, $key) {\n          $Exclude: append($Exclude, $key);\n        }\n      }\n    }\n\n    // Always try and print the Left value\n    @include grid-span-build-exclude($Left, $Exclude, false);\n\n    // If Direction is Both or RTL, add the RTL attribute selector\n    @if $Direction == 'both' or $Direction == 'rtl' {\n      [dir=\"rtl\"] & {\n        @include grid-span-build-exclude($Right, $Exclude, true);\n      }\n    }\n    @else {\n      @include grid-span-build-exclude($Right, $Exclude, true);\n    }\n  }\n  @else {\n    @warn \"There doesn't appear to be an output style named `#{$output-style}`. Please ensure that the function `output-#{$output-style}` and that the output style `#{$output-style}` are both available before trying to use them.\";\n  }\n}\n\n@mixin grid-span-build($property, $value) {\n  @if type-of($value) != 'map' {\n    #{$property}: $value;\n  }\n  @else {\n    @each $prefix, $val in $value {\n      #{$property}: $val;\n    }\n  }\n}\n\n@mixin grid-span-build-exclude($properties, $delta, $exclude: false) {\n  @each $property, $value in $properties {\n    @if $exclude {\n      @if not index($delta, $property) {\n        @include grid-span-build($property, $value);\n      }\n    }\n    @else {\n      @include grid-span-build($property, $value);\n    }\n  }\n}","//////////////////////////////\n// Find width, in percentages, of the column span\n//////////////////////////////\n@function column-span($span, $location, $grid: null, $gutter: null, $gutter-style: null) {\n  // Find the grid and gutters\n  $grid: find-grid($grid);\n  $gutter: find-gutter($gutter);\n  $gutter-style: find-gutter-style($gutter-style);\n\n  @if fixed-gutter($grid, $gutter, $gutter-style) {\n    $gutter: 0;\n  }\n\n  // @debug $grid;\n  // @debug $gutter;\n\n  // Combine the grid and gutters\n  $grid-and-gutters: column-sum($grid, $gutter, $gutter-style);\n\n  // @debug $grid-and-gutters;\n\n  // Equal width grid are easy! Deal with them!\n  @if type-of($grid) == 'number' or length($grid) == 1 {\n    $span-and-gutters: $span + $gutter * ($span - 1);\n    @return $span-and-gutters / $grid-and-gutters * 100%;\n  }\n  // Asymmetric lists are harder, so we're going to treat them as their own grid\n  @else if type-of($grid) == 'list' or length($grid) > 1 {\n    $span-and-gutters: 0;\n\n    @if $location == 1 and $span >= 1 {\n      @for $i from 1 through $span {\n        $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\n      }\n    }\n    @else {\n      $total: $location + $span - 1;\n      @if $total != 0 {\n        @for $i from $location through $total {\n          $span-and-gutters: $span-and-gutters + nth($grid, $i) + $gutter;\n        }\n      }\n    }\n    $span-and-gutters: $span-and-gutters - $gutter;\n\n    @return $span-and-gutters / $grid-and-gutters * 100%;\n  }\n  @else {\n    @warn \"Can't find a working set of grid! That's terrible!\";\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Find the total sum of the grid\n//////////////////////////////\n@function column-sum($grid, $gutter, $gutter-style) {\n  $split: if(index($gutter-style, 'split'), true, false);\n\n  @if type-of($grid) == 'number' or length($grid) == 1 {\n    @if $split {\n      @return nth($grid, 1) + ((column-count(nth($grid, 1))) * nth($gutter, 1));\n    }\n    @else {\n      @return nth($grid, 1) + ((column-count(nth($grid, 1)) - 1) * nth($gutter, 1));\n    }\n\n  }\n  @else if type-of($grid) == 'list' {\n    $sum: 0;\n    @each $column in $grid {\n      $sum: $sum + nth($column, 1);\n    }\n    @if $split {\n      $sum: $sum + (column-count($grid)) * nth($gutter, 1);\n    }\n    @else {\n      $sum: $sum + (column-count($grid) - 1) * nth($gutter, 1);\n    }\n    @return $sum;\n  }\n}\n\n//////////////////////////////\n// Find the number of grid\n//////////////////////////////\n@function column-count($grid) {\n  @if type-of($grid) == 'number' {\n    @return $grid;\n  }\n  @if type-of($grid) == 'list' {\n    @if length($grid) == 1 {\n      @return nth($grid, 1);\n    }\n    @else {\n      @return length($grid);\n    }\n  }\n}","//////////////////////////////\n// Find Opposite Direction\n//////////////////////////////\n@function opposite-direction($dir) {\n  @if $dir == 'left' {\n    @return right;\n  }\n  @else if  $dir == 'right' {\n    @return left;\n  }\n  @else if $dir == 'ltr' {\n    @return rtl;\n  }\n  @else if $dir == 'rtl' {\n    @return ltr;\n  }\n  @else if $dir == 'top' {\n    @return bottom;\n  }\n  @else if $dir == 'bottom' {\n    @return top;\n  }\n  @else {\n    @warn \"#{$dir} is not a direction! Make sure your direction is all lowercase!\";\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Find Direction Name\n//////////////////////////////\n@function named-direction($dir) {\n  @if $dir == 'ltr' {\n    @return left;\n  }\n  @else if $dir == 'rtl' {\n    @return right;\n  }\n  @else {\n    @warn \"#{$dir} is not a valid HTML direction! Make sure you are using a valid HTML direction\";\n    @return false;\n  }\n}","@function output-isolation($Span-Map) {\n  // Set up Left/Right maps\n  $Return: ();\n\n  $Span: map-get($Span-Map, 'span');\n  $Location: map-get($Span-Map, 'location');\n\n  $Grid: map-get($Span-Map, 'grid');\n  $Gutter: map-get($Span-Map, 'gutter');\n  $Style: map-get($Span-Map, 'style');\n\n  $Start-Row: map-get($Span-Map, 'start row');\n  $End-Row: map-get($Span-Map, 'end row');\n\n  $Fixed-Gutter: map-get($Span-Map, 'fixed gutter');\n  $Split-Gutter: map-get($Span-Map, 'split gutter');\n  $Gutter-Property: map-get($Span-Map, 'gutter property');\n\n  $Direction: map-get($Span-Map, 'direction');\n  $Options: map-get($Span-Map, 'options');\n\n  $Width: column-span($Span, $Location, $Grid, $Gutter, $Style);\n  $Margin-Span: column-span(($Location - 1), 1, $Grid, $Gutter, $Style);\n  $Gutter-Span: gutter-span($Gutter, $Grid);\n\n  // Backwards Compatibility for Options\n  @if type-of($Options) != 'map' and $Options != null {\n    $Options: ('clear': unquote(nth($Options, 1)));\n  }\n\n  $Dir: $Direction;\n  $Opp: opposite-direction($Dir);\n\n  $Return: map-merge($Return, ('width': $Width));\n\n  @if ($End-Row) {\n    $Return: map-merge($Return, ('float': $Opp));\n    $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n\n    @if $Split-Gutter and not $Fixed-Gutter {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      $Return: map-merge($Return, ('margin-#{$Opp}': 0));\n    }\n  }\n  @else {\n    $Return: map-merge($Return, ('float': $Dir));\n    $Return: map-merge($Return, ('margin-#{$Opp}': -100%));\n\n    @if $Start-Row {\n      @if $Split-Gutter and not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Gutter-Span / 2));\n      }\n      @else if not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': 0));\n      }\n    }\n    @else {\n      @if $Split-Gutter and not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span + $Gutter-Span / 2));\n      }\n      @else if not $Fixed-Gutter {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span + $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('margin-#{$Dir}': $Margin-Span));\n      }\n    }\n  }\n  // If options are set, we merge them in!\n  @if ($Options) {\n    $Return: map-merge($Return, $Options);\n  }\n\n  // If CLear isn't already available, set it!\n  @if not map-has-key($Return, 'clear') {\n    $Return: map-merge($Return, ('clear': none));\n  }\n\n  // Left Fixed Gutters\n  @if $Fixed-Gutter {\n    @if index($Style, 'split') {\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Dir}': $Gutter-Span / 2));\n      $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span / 2));\n    }\n    @else {\n      @if not $End-Row {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': $Gutter-Span));\n      }\n      @else {\n        $Return: map-merge($Return, ('#{$Gutter-Property}-#{$Opp}': 0));\n      }\n    }\n  }\n\n  @return $Return;\n}\n\n//////////////////////////////\n// Happy Syntax for Isolation\n//\n// Makes working with Isolation easier, as it moves Clear to a 1st class citizen of the mixin, and automatically builds the verbose grid-span mixin call\n//////////////////////////////\n@mixin isolation-span($Span, $Location, $clear: false, $grid: false, $gutter: false, $gutter-style: false, $from: false) {\n  $Options: ();\n  @if $clear {\n    $Options: map-merge($Options, ('clear': unquote($clear)));\n  }\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n\n  $Options: if(length($Options) > 0, $Options, null);\n  @include grid-span($Span, $Location, $grid, $gutter, 'isolation', $gutter-style, $Options);\n}\n\n//////////////////////////////\n// Happy Syntax of Asymmetric Grids\n//\n// Makes working with asymmetric grids easier!\n//////////////////////////////\n@mixin asymmetric-span($Location, $Span: false, $grid: false, $gutter: false, $gutter-style: false, $from: false, $output-style: false) {\n\n  $Span: if($Span != false, $Span, 1);\n  $output-style: if($output-style != false, $output-style, sgs-get('asymmetric output'));\n\n  $Options: ();\n  @if $from {\n    $Options: map-merge($Options, ('from': $from));\n  }\n  $Options: if(length($Options) > 0, $Options, null);\n\n  @include grid-span($Span, $Location, $grid, $gutter, $output-style, $gutter-style, $Options);\n}"]}